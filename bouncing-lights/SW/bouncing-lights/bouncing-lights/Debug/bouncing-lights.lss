
bouncing-lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000632  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 
	unsigned int counter = 0;
	int value = 0b00000001;
	int direction = 1;
	int coefficient = 0;
	DDRB=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
int main(void)
{
 
	unsigned int counter = 0;
	int value = 0b00000001;
	int direction = 1;
  70:	41 e0       	ldi	r20, 0x01	; 1
  72:	50 e0       	ldi	r21, 0x00	; 0

int main(void)
{
 
	unsigned int counter = 0;
	int value = 0b00000001;
  74:	e1 e0       	ldi	r30, 0x01	; 1
  76:	f0 e0       	ldi	r31, 0x00	; 0
#include<stdio.h>

int main(void)
{
 
	unsigned int counter = 0;
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(30);
		}
		if(counter == 7){
			direction = -1;
		}else if(counter==0){
			direction = 1;
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
		}
		while(coefficient--){
			_delay_ms(30);
		}
		if(counter == 7){
			direction = -1;
  80:	1f ef       	ldi	r17, 0xFF	; 255
  82:	0f ef       	ldi	r16, 0xFF	; 255
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	41 2f       	mov	r20, r17
  88:	50 2f       	mov	r21, r16
	int direction = 1;
	int coefficient = 0;
	DDRB=0xFF;
    while (1) 
    {
		coefficient=PINA;
  8a:	29 b3       	in	r18, 0x19	; 25
		PORTB=value;
  8c:	e8 bb       	out	0x18, r30	; 24
		counter+=direction;
  8e:	64 0f       	add	r22, r20
  90:	75 1f       	adc	r23, r21
		if(direction==1){
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	51 05       	cpc	r21, r1
  96:	29 f4       	brne	.+10     	; 0xa2 <main+0x36>
			value = value<<1;
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
		}else{
			value=value>>1;
		}
		while(coefficient--){
  9c:	21 11       	cpse	r18, r1
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <main+0x3c>
  a0:	10 c0       	rjmp	.+32     	; 0xc2 <main+0x56>
		PORTB=value;
		counter+=direction;
		if(direction==1){
			value = value<<1;
		}else{
			value=value>>1;
  a2:	f5 95       	asr	r31
  a4:	e7 95       	ror	r30
  a6:	fa cf       	rjmp	.-12     	; 0x9c <main+0x30>
		}
		while(coefficient--){
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	cf e5       	ldi	r28, 0x5F	; 95
  b0:	da ee       	ldi	r29, 0xEA	; 234
  b2:	21 97       	sbiw	r28, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	82 17       	cp	r24, r18
  be:	93 07       	cpc	r25, r19
  c0:	b1 f7       	brne	.-20     	; 0xae <main+0x42>
			_delay_ms(30);
		}
		if(counter == 7){
  c2:	67 30       	cpi	r22, 0x07	; 7
  c4:	71 05       	cpc	r23, r1
  c6:	f9 f2       	breq	.-66     	; 0x86 <main+0x1a>
			direction = -1;
		}else if(counter==0){
  c8:	61 15       	cp	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	f1 f6       	brne	.-68     	; 0x8a <main+0x1e>
			direction = 1;
  ce:	4b 2f       	mov	r20, r27
  d0:	5a 2f       	mov	r21, r26
  d2:	db cf       	rjmp	.-74     	; 0x8a <main+0x1e>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
